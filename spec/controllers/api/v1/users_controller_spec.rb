require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::UsersController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      email: 'test@example.com',
      password: 'password',
      password_confirmation: 'password'
    }
  }

  let(:invalid_attributes) {
    {
      email: 'mal.formed_email.com',
      password: 'test',
      password_confirmation: 'password'
    }
  }

  before do
    request.headers['Authorization'] =  user.auth_token if defined?(user)
  end

  describe "GET index" do
    let!(:user) { User.create! valid_attributes }
    it "assigns all users as @users" do
      process :index, method: :get, params: {}
      expect(response.body).to eq([user].to_json)
    end
  end

  describe "GET show" do
    let!(:user) { User.create! valid_attributes }

    it "assigns the requested user as @user" do
      process :show, method: :get, params: {:id => user.to_param}
      expect(response.body).to eq "{\"id\":#{user.id},\"email\":\"#{user.email}\",\"auth_token\":\"#{user.auth_token}\"}"
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new User" do
        expect {
          process :create, method: :post, params: { user: valid_attributes }
        }.to change(User, :count).by(1)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        process :create, method: :post, params: {user: invalid_attributes}
        expect(response.body).to eq("{\"email\":[\"is invalid\"],\"password_confirmation\":[\"doesn't match Password\"],\"password\":[\"is too short (minimum is 6 characters)\"]}")
      end
    end
  end

  describe "PUT update" do
    let!(:user) { User.create! valid_attributes }

    describe "with valid params" do
      let(:new_attributes) {
        {
          email: 'new@example.com',
          password: 'password',
          password_confirmation: 'password'
        }
      }


      it "updates the requested user" do
        process :update, method: :put, params: { :id => user.id, user: new_attributes }
        user.reload
        expect(user.email).to eq 'new@example.com'
      end

      it "returns the requested user as @user" do
        process :update, method: :put, params: {:id => user.to_param, :user => new_attributes}
        user.reload
        expect(response.body).to eq "{\"id\":#{user.id},\"email\":\"#{user.email}\",\"auth_token\":\"#{user.auth_token}\"}"
      end
    end

    describe "with invalid params" do
      it "returns the user errors" do
        process :update, method: :put, params: {:id => user.to_param, :user => invalid_attributes}
        expect(response.body).to eq("{\"email\":[\"is invalid\"],\"password_confirmation\":[\"doesn't match Password\"],\"password\":[\"is too short (minimum is 6 characters)\"]}")
      end
    end
  end

  describe "DELETE destroy" do
    let!(:user) { User.create! valid_attributes }

    it "destroys the requested user" do
      expect {
        process :destroy, method: :delete, params: {:id => user.to_param}
      }.to change(User, :count).by(-1)
    end
  end

end
